一、变量作用域
1.1 局部变量
定义在函数体内部的变量，只在函数体内部起作用，临时保存数据，函数调用结束销毁局部变量

1.2 全局变量

1.3 在函数体内部修改全局变量
*** 用global声明变量 ***


二、多函数程序执行流程
2.1 不同函数共用全局变量
在一个函数中声明全局变量后，对变量做的修改会影响下一个函数

2.2 返回值作为参数
一个函数的返回值可以作为另外一个函数的参数



三、函数的返回值（多个返回值）-----返回的是一个元组（默认），也可以是列表，字典
return 返回值1，返回值2，.....


四、函数的参数
4.1 位置参数：根据函数定义时形参的顺序来传递参数
传递和定义的顺序及个数必须一致，否则会导致无意义甚至报错

4.2 关键字参数：函数调用时，实参可以采用“键=值”的形式来配对参数，可以让函数更加清晰，同时消除了位置参数的顺序问题
函数调用时，如果有位置参数，一定要在关键字参数之前，关键字参数之间没有顺序要求

4.3 缺省参数（默认参数）：函数定义时，可为形参设置默认值，此时调用函数时可以不传递此参数值
函数定义和调用时，位置参数一定在缺省参数之前

4.4 不定长参数（可变参数）：用于不确定调用的时候会传递多少个参数的场景
4.4.1 包裹位置参数
def 函数名（*args）
    函数体

传进的所有参数会被包裹为一个元组

4.4.2 包裹关键字参数
def 函数名（**kwargs）
    函数体

传递的所有参数会被包裹为一个字典


五、拆包
def function1():
    return (1, 2, 3)
def function2():
    return [1, 2, 3]
def function3():
    return {"key1": 1, "key2": 2, "key3": 3}

# 调用函数,获取元组的数据
num1, num2, num3 = function1()
print(num1, num2, num3)
# 调用函数,获取列表的数据
num1, num2, num3 = function2()
print(num1, num2, num3)
# 调用函数,获取字典的数据
ret1, ret2, ret3 = function3()
print(ret1, ret2, ret3)---输出的时key值


六、交换变量值
6.1 通过第三个变量
c = a
a = b
b = c

6.2
a,b = b,a

七、引用
7.1 不可变类型（以int为例）
# a和b指向的地址相同
a = 1
b = a
print(id(a))
print(id(b))

# a指向的地址发生了变化
a = 1
b = a
a += 1
print(id(a))
print(id(b))

7.2 可变类型（以列表为例）
# aa和bb指向的地址相同
aa = [10,20]
bb = aa
print(id(aa))
print(id(bb))

# aa和bb指向的地址相同,且和未变化之前相同
aa.append(30)
print(id(aa))
print(id(bb))

7.3 引用当作实参

